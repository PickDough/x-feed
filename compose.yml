version: '3.8'

services:
  roach-cert:
    container_name: roach-cert
    hostname: roach-cert
    build:
      context: cockroach
      dockerfile: Dockerfile
    volumes:
      - certs-roach-1:/certs/roach-1
      - certs-roach-2:/certs/roach-2
      - certs-client:/certs/client

  roach-1:
    container_name: roach-1
    image: cockroachdb/cockroach:latest
    hostname: roach-1
    volumes:
      - roach-1-data:/cockroach/cockroach-data
      - certs-roach-1:/certs
    ports:
      - "26257:26257"
      - "8080:8080"
    networks:
      - cockroachnet
    command: "start \
      --advertise-addr=roach-1:26257 \
      --http-addr=roach-1:8080 \
      --listen-addr=roach-1:26257 \
      --certs-dir=/certs \
      --join=roach-1,roach-2"
    depends_on:
      - roach-cert

  roach-2:
    container_name: roach-2
    image: cockroachdb/cockroach:latest
    hostname: roach-2
    volumes:
      - roach-2-data:/cockroach/cockroach-data
      - certs-roach-2:/certs
    ports:
      - "26258:26257"
      - "8081:8080"
    networks:
      - cockroachnet
    command: "start \
      --advertise-addr=roach-2:26257 \
      --http-addr=roach-2:8080 \
      --listen-addr=roach-2:26257 \
      --certs-dir=/certs \
      --join=roach-1,roach-2"
    depends_on:
      - roach-cert
      - roach-1
  
  roach-init:
    container_name: roach-init
    image: cockroachdb/cockroach:latest
    depends_on:
      - roach-cert
      - roach-1
    networks:
      - cockroachnet
    command: init --certs-dir=/certs --host=roach-1
    volumes:
      - certs-client:/certs
  
  db-init:
    container_name: db-init
    restart: on-failure
    image: cockroachdb/cockroach:latest
    environment:
      - DB_HOST=roach-1
      - CERTS=/certs
    env_file:
      - ./cockroach/.env
    depends_on:
      - roach-init
      - roach-1
    networks:
      - cockroachnet
    entrypoint: /bin/bash
    command: /setup-db.sh
    volumes:
      - certs-client:/certs
      - ./cockroach/setup-db.sh:/setup-db.sh

  zoo1:
    image: confluentinc/cp-zookeeper:latest
    hostname: zoo1
    container_name: zoo1
    networks:
      - kafkanet
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    networks:
      - kafkanet
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zoo1:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
    depends_on:
      - zoo1

  kafka-init:
    image: confluentinc/cp-kafka:latest
    restart: on-failure
    networks:
      - kafkanet
    depends_on:
      - kafka1
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka1:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic message-topic --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic message-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka1:29092 --list
      "

  api:
    container_name: api
    build:
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgres://roach:roach@roach-1:26257/twitter?sslmode=require&sslrootcert=/certs/ca.crt&sslcert=/certs/client.roach.crt&sslkey=/certs/client.roach.key
      - PORT=3000
    depends_on:
      db-init:
        condition: service_completed_successfully
      kafka-init:
        condition: service_completed_successfully
    networks:
      - cockroachnet
      - kafkanet
    ports:
      - "3000:3000"
    volumes:
      - certs-client:/certs


volumes:
  roach-1-data:
  roach-2-data:
  certs-roach-1:
  certs-roach-2:
  certs-client:

networks:
  cockroachnet:
    driver: bridge
  kafkanet:
    driver: bridge